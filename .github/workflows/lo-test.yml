name: build

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Select OpenWrt branch'
        default: 'master'
        required: false

jobs:
  build_r6s:
    name: Build NanoPi R6S OpenWrt
    runs-on: ubuntu-latest
    env:
      DEVICE: r6s
      BRANCH: ${{ github.event.client_payload.branch || github.event.inputs.branch }}
      TG: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    steps:
      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo sysctl vm.swappiness=0
          sudo apt update
          sudo apt -qq -y --no-install-recommends install pv jq ccache cmake cpio flex gawk gettext git \
          g++-multilib gnutls-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libncurses5-dev \
          libreadline-dev libssl-dev libtool patch python3 python3-pip python3-ply python3-docutils \
          python3-pyelftools re2c rsync squashfs-tools swig texinfo unzip wget xxd zlib1g-dev
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /opt/hostedtoolcache

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Checkout OpenWrt
        run: |
          cd
          sudo chown $USER:$(id -gn) /mnt
          truncate -s 30g /mnt/lede.img && mkfs.btrfs -M /mnt/lede.img
          LOOP_DEVICE=$(losetup -f) && echo "LOOP_DEVICE=$LOOP_DEVICE" >> $GITHUB_ENV
          sudo losetup -P --direct-io $LOOP_DEVICE /mnt/lede.img
          mkdir -p lede && sudo mount -o nossd,compress=zstd $LOOP_DEVICE lede
          sudo chown $USER:$(id -gn) lede
          git clone -b $BRANCH --single-branch https://github.com/coolsnowwolf/lede lede

      - name: Update feeds and packages
        run: |
          cd ~/lede
          rm -rf tmp feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          cd

      - name: Custom configure file
        run: |
          cd ~/lede
          cat $GITHUB_WORKSPACE/r6s.config.seed | sed 's/\(CONFIG_PACKAGE_luci-app-[^A-Z]*=\)y/\1m/' > .config
          find package/ -type d -name luci-app-* | rev | cut -d'/' -f1 | rev | xargs -ri echo CONFIG_PACKAGE_{}=m >> .config
          make defconfig
          cat .config

      - name: Clean build cache
        run: |
          cd ~/lede
          df -h .
          make clean || true
          df -h .

      - name: Build OpenWrt for R6S
        timeout-minutes: 1440
        run: |
          cd ~/lede
          ulimit -SHn 65000
          rm -rf dl; while true; do make download -j && break || true; done
          make -j$(nproc) IGNORE_ERRORS=1 tools/compile toolchain/compile target/compile package/compile package/install target/install
          if [ ! -e ~/lede/bin/targets/*/*/*imagebuilder*xz ]; then
            df -h
            make V=sc
          fi

      - name: Prepare artifact
        run: |
          cd
          mkdir -p ./artifact/buildinfo
          cd lede
          cp -rf .config $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ../artifact/buildinfo/
          echo "strDate=$(TZ=UTC-8 date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "strDevice=$(echo $DEVICE | awk '{print toupper($0)}')" >> $GITHUB_ENV
          cd ..
          mv artifact $GITHUB_WORKSPACE

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Save cache state
        if: env.TG
        run: |
          cd
          sleep 60
          sudo umount lede
          sudo losetup -d $LOOP_DEVICE
          echo "Build completed"

      - name: Send Telegram notification
        if: env.TG
        run: |
          curl -k --data chat_id="${{secrets.TELEGRAM_CHAT_ID}}" --data "text=The ${{env.DEVICE}} build completed with status ${{job.status}}." "https://api.telegram.org/bot${{secrets.TELEGRAM_BOT_TOKEN}}/sendMessage"
